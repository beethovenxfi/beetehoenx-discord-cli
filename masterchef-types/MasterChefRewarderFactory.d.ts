/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MasterChefRewarderFactoryInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "DEFAULT_REWARDER_FARM_ALLOCATION()": FunctionFragment;
    "OPERATOR_ROLE()": FunctionFragment;
    "activateRewarder(uint256)": FunctionFragment;
    "approveRewarder(uint256,uint256)": FunctionFragment;
    "defaultAdmin()": FunctionFragment;
    "deployedRewarders(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "masterChef()": FunctionFragment;
    "masterChefOperator()": FunctionFragment;
    "prepareRewarder(address,address,uint256,address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rewarderConfigs(uint256)": FunctionFragment;
    "rewarderDeploymentLength()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_REWARDER_FARM_ALLOCATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateRewarder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveRewarder",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployedRewarders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "masterChef",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "masterChefOperator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "prepareRewarder",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewarderConfigs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewarderDeploymentLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_REWARDER_FARM_ALLOCATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateRewarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveRewarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployedRewarders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "masterChef", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "masterChefOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepareRewarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewarderConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewarderDeploymentLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "RewarderActivated(address,address,uint256,address)": EventFragment;
    "RewarderApproved(address,address,address)": EventFragment;
    "RewarderPrepared(address,address,address,uint256,address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RewarderActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewarderApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewarderPrepared"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export class MasterChefRewarderFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MasterChefRewarderFactoryInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_REWARDER_FARM_ALLOCATION(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "DEFAULT_REWARDER_FARM_ALLOCATION()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "OPERATOR_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    activateRewarder(
      deploymentId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "activateRewarder(uint256)"(
      deploymentId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    approveRewarder(
      deploymentId: BigNumberish,
      timelockEta: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approveRewarder(uint256,uint256)"(
      deploymentId: BigNumberish,
      timelockEta: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    defaultAdmin(overrides?: CallOverrides): Promise<[string]>;

    "defaultAdmin()"(overrides?: CallOverrides): Promise<[string]>;

    deployedRewarders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "deployedRewarders(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    masterChef(overrides?: CallOverrides): Promise<[string]>;

    "masterChef()"(overrides?: CallOverrides): Promise<[string]>;

    masterChefOperator(overrides?: CallOverrides): Promise<[string]>;

    "masterChefOperator()"(overrides?: CallOverrides): Promise<[string]>;

    prepareRewarder(
      lpToken: string,
      rewardToken: string,
      rewardPerSecond: BigNumberish,
      admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "prepareRewarder(address,address,uint256,address)"(
      lpToken: string,
      rewardToken: string,
      rewardPerSecond: BigNumberish,
      admin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rewarderConfigs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, boolean, BigNumber, boolean] & {
        admin: string;
        lpToken: string;
        rewardToken: string;
        rewardsPerSecond: BigNumber;
        approved: boolean;
        timelockEta: BigNumber;
        activated: boolean;
      }
    >;

    "rewarderConfigs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, boolean, BigNumber, boolean] & {
        admin: string;
        lpToken: string;
        rewardToken: string;
        rewardsPerSecond: BigNumber;
        approved: boolean;
        timelockEta: BigNumber;
        activated: boolean;
      }
    >;

    rewarderDeploymentLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "rewarderDeploymentLength()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  DEFAULT_REWARDER_FARM_ALLOCATION(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "DEFAULT_REWARDER_FARM_ALLOCATION()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  "OPERATOR_ROLE()"(overrides?: CallOverrides): Promise<string>;

  activateRewarder(
    deploymentId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "activateRewarder(uint256)"(
    deploymentId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  approveRewarder(
    deploymentId: BigNumberish,
    timelockEta: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approveRewarder(uint256,uint256)"(
    deploymentId: BigNumberish,
    timelockEta: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  defaultAdmin(overrides?: CallOverrides): Promise<string>;

  "defaultAdmin()"(overrides?: CallOverrides): Promise<string>;

  deployedRewarders(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "deployedRewarders(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  masterChef(overrides?: CallOverrides): Promise<string>;

  "masterChef()"(overrides?: CallOverrides): Promise<string>;

  masterChefOperator(overrides?: CallOverrides): Promise<string>;

  "masterChefOperator()"(overrides?: CallOverrides): Promise<string>;

  prepareRewarder(
    lpToken: string,
    rewardToken: string,
    rewardPerSecond: BigNumberish,
    admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "prepareRewarder(address,address,uint256,address)"(
    lpToken: string,
    rewardToken: string,
    rewardPerSecond: BigNumberish,
    admin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rewarderConfigs(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, boolean, BigNumber, boolean] & {
      admin: string;
      lpToken: string;
      rewardToken: string;
      rewardsPerSecond: BigNumber;
      approved: boolean;
      timelockEta: BigNumber;
      activated: boolean;
    }
  >;

  "rewarderConfigs(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, boolean, BigNumber, boolean] & {
      admin: string;
      lpToken: string;
      rewardToken: string;
      rewardsPerSecond: BigNumber;
      approved: boolean;
      timelockEta: BigNumber;
      activated: boolean;
    }
  >;

  rewarderDeploymentLength(overrides?: CallOverrides): Promise<BigNumber>;

  "rewarderDeploymentLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    DEFAULT_REWARDER_FARM_ALLOCATION(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "DEFAULT_REWARDER_FARM_ALLOCATION()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    "OPERATOR_ROLE()"(overrides?: CallOverrides): Promise<string>;

    activateRewarder(
      deploymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "activateRewarder(uint256)"(
      deploymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approveRewarder(
      deploymentId: BigNumberish,
      timelockEta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approveRewarder(uint256,uint256)"(
      deploymentId: BigNumberish,
      timelockEta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    defaultAdmin(overrides?: CallOverrides): Promise<string>;

    "defaultAdmin()"(overrides?: CallOverrides): Promise<string>;

    deployedRewarders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "deployedRewarders(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    masterChef(overrides?: CallOverrides): Promise<string>;

    "masterChef()"(overrides?: CallOverrides): Promise<string>;

    masterChefOperator(overrides?: CallOverrides): Promise<string>;

    "masterChefOperator()"(overrides?: CallOverrides): Promise<string>;

    prepareRewarder(
      lpToken: string,
      rewardToken: string,
      rewardPerSecond: BigNumberish,
      admin: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "prepareRewarder(address,address,uint256,address)"(
      lpToken: string,
      rewardToken: string,
      rewardPerSecond: BigNumberish,
      admin: string,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewarderConfigs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, boolean, BigNumber, boolean] & {
        admin: string;
        lpToken: string;
        rewardToken: string;
        rewardsPerSecond: BigNumber;
        approved: boolean;
        timelockEta: BigNumber;
        activated: boolean;
      }
    >;

    "rewarderConfigs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, boolean, BigNumber, boolean] & {
        admin: string;
        lpToken: string;
        rewardToken: string;
        rewardsPerSecond: BigNumber;
        approved: boolean;
        timelockEta: BigNumber;
        activated: boolean;
      }
    >;

    rewarderDeploymentLength(overrides?: CallOverrides): Promise<BigNumber>;

    "rewarderDeploymentLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    RewarderActivated(
      lpToken: null,
      rewarder: null,
      pid: null,
      admin: null
    ): EventFilter;

    RewarderApproved(lpToken: null, rewarder: null, admin: null): EventFilter;

    RewarderPrepared(
      lpToken: null,
      rewarder: null,
      rewardToken: null,
      rewardPerSecond: null,
      admin: null,
      sender: null
    ): EventFilter;

    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_REWARDER_FARM_ALLOCATION(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "DEFAULT_REWARDER_FARM_ALLOCATION()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "OPERATOR_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    activateRewarder(
      deploymentId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "activateRewarder(uint256)"(
      deploymentId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    approveRewarder(
      deploymentId: BigNumberish,
      timelockEta: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approveRewarder(uint256,uint256)"(
      deploymentId: BigNumberish,
      timelockEta: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    defaultAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    "defaultAdmin()"(overrides?: CallOverrides): Promise<BigNumber>;

    deployedRewarders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deployedRewarders(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    masterChef(overrides?: CallOverrides): Promise<BigNumber>;

    "masterChef()"(overrides?: CallOverrides): Promise<BigNumber>;

    masterChefOperator(overrides?: CallOverrides): Promise<BigNumber>;

    "masterChefOperator()"(overrides?: CallOverrides): Promise<BigNumber>;

    prepareRewarder(
      lpToken: string,
      rewardToken: string,
      rewardPerSecond: BigNumberish,
      admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "prepareRewarder(address,address,uint256,address)"(
      lpToken: string,
      rewardToken: string,
      rewardPerSecond: BigNumberish,
      admin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    rewarderConfigs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewarderConfigs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewarderDeploymentLength(overrides?: CallOverrides): Promise<BigNumber>;

    "rewarderDeploymentLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_REWARDER_FARM_ALLOCATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_REWARDER_FARM_ALLOCATION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "OPERATOR_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activateRewarder(
      deploymentId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "activateRewarder(uint256)"(
      deploymentId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    approveRewarder(
      deploymentId: BigNumberish,
      timelockEta: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approveRewarder(uint256,uint256)"(
      deploymentId: BigNumberish,
      timelockEta: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    defaultAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "defaultAdmin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployedRewarders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deployedRewarders(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    masterChef(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "masterChef()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    masterChefOperator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "masterChefOperator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prepareRewarder(
      lpToken: string,
      rewardToken: string,
      rewardPerSecond: BigNumberish,
      admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "prepareRewarder(address,address,uint256,address)"(
      lpToken: string,
      rewardToken: string,
      rewardPerSecond: BigNumberish,
      admin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rewarderConfigs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewarderConfigs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewarderDeploymentLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewarderDeploymentLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
